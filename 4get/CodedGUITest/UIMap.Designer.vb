'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 11.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace CodedGUITest
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''add a timed task
        '''</summary>
        Public Sub TestAddTimedTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'add tuition ,at crown centre ,from 1900 ,to 2100 ,!' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestAddTimedTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestAddTimedTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''delete a task
        '''</summary>
        Public Sub TestDeleteTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'delete 4' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestDeleteTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestDeleteTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''mark a task as done and task is added to completed list
        '''</summary>
        Public Sub TestMarkTaskDone()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'mark 7 done' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestMarkTaskDoneParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestMarkTaskDoneParams.UITextboxInputEditSendKeys, ModifierKeys.None)

            'Type 'Control + {Tab}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestMarkTaskDoneParams.UITextboxInputEditSendKeys1, ModifierKeys.Control)
        End Sub
        
        '''<summary>
        '''modify a task
        '''</summary>
        Public Sub TestModifyTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'mod 1 something ,at place ,by 24/12/13 2pm' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestModifyTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestModifyTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property TestAddTimedTaskParams() As TestAddTimedTaskParams
            Get
                If (Me.mTestAddTimedTaskParams Is Nothing) Then
                    Me.mTestAddTimedTaskParams = New TestAddTimedTaskParams()
                End If
                Return Me.mTestAddTimedTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestDeleteTaskParams() As TestDeleteTaskParams
            Get
                If (Me.mTestDeleteTaskParams Is Nothing) Then
                    Me.mTestDeleteTaskParams = New TestDeleteTaskParams()
                End If
                Return Me.mTestDeleteTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestMarkTaskDoneParams() As TestMarkTaskDoneParams
            Get
                If (Me.mTestMarkTaskDoneParams Is Nothing) Then
                    Me.mTestMarkTaskDoneParams = New TestMarkTaskDoneParams()
                End If
                Return Me.mTestMarkTaskDoneParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestModifyTaskParams() As TestModifyTaskParams
            Get
                If (Me.mTestModifyTaskParams Is Nothing) Then
                    Me.mTestModifyTaskParams = New TestModifyTaskParams()
                End If
                Return Me.mTestModifyTaskParams
            End Get
        End Property
        
        Public ReadOnly Property UIItem4getWindow() As UIItem4getWindow
            Get
                If (Me.mUIItem4getWindow Is Nothing) Then
                    Me.mUIItem4getWindow = New UIItem4getWindow()
                End If
                Return Me.mUIItem4getWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mTestAddTimedTaskParams As TestAddTimedTaskParams
        
        Private mTestDeleteTaskParams As TestDeleteTaskParams
        
        Private mTestMarkTaskDoneParams As TestMarkTaskDoneParams
        
        Private mTestModifyTaskParams As TestModifyTaskParams
        
        Private mUIItem4getWindow As UIItem4getWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestAddTimedTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestAddTimedTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'add tuition ,at crown centre ,from 1900 ,to 2100 ,!' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "add tuition ,at crown centre ,from 1900 ,to 2100 ,!"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestDeleteTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestDeleteTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'delete 4' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "delete 4"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestMarkTaskDone'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestMarkTaskDoneParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'mark 7 done' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "mark 7 done"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys1 As String = "{Tab}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestModifyTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestModifyTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'mod 1 something ,at place ,by 24/12/13 2pm' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "mod 1 something ,at place ,by 24/12/13 2pm"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIItem4getWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "4get"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIEnterCommandHereWindow() As UIEnterCommandHereWindow
            Get
                If (Me.mUIEnterCommandHereWindow Is Nothing) Then
                    Me.mUIEnterCommandHereWindow = New UIEnterCommandHereWindow(Me)
                End If
                Return Me.mUIEnterCommandHereWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIEnterCommandHereWindow As UIEnterCommandHereWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIEnterCommandHereWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "textboxInput"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITextboxInputEdit() As WinEdit
            Get
                If (Me.mUITextboxInputEdit Is Nothing) Then
                    Me.mUITextboxInputEdit = New WinEdit(Me)
                    Me.mUITextboxInputEdit.WindowTitles.Add("4get")
                End If
                Return Me.mUITextboxInputEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITextboxInputEdit As WinEdit
        #End Region
    End Class
End Namespace

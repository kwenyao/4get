'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 11.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace CodedGUITest
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''add a timed task
        '''</summary>
        Public Sub TestAddTimedTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'add tuition ,at crown centre ,from 1900 ,to 2100 ,!' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestAddTimedTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestAddTimedTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''delete a task
        '''</summary>
        Public Sub TestDeleteTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'delete 4' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestDeleteTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestDeleteTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''mark a task as done and task is added to completed list
        '''</summary>
        Public Sub TestMarkTaskDone()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'mark 7 done' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestMarkTaskDoneParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestMarkTaskDoneParams.UITextboxInputEditSendKeys, ModifierKeys.None)

            'Type 'Control + {Tab}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestMarkTaskDoneParams.UITextboxInputEditSendKeys1, ModifierKeys.Control)
        End Sub
        
        '''<summary>
        '''modify a task
        '''</summary>
        Public Sub TestModifyTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'mod 1 something ,at place ,by 24/12/13 2pm' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestModifyTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestModifyTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''cycle through the tabs
        '''</summary>
        Public Sub TestNavigateTabs()
            Dim uIItem4getClient As WinClient = Me.UIItem4getWindow.UIItem4getClient
            Dim uIItem1ListItem As WinListItem = Me.UIItem4getWindow.UITodoListViewWindow.UIItem1ListItem
            Dim uIItem1ListItem1 As WinListItem = Me.UIItem4getWindow.UICompletedListViewWindow.UIItem1ListItem
            Dim uIOverdueListViewList As WinList = Me.UIItem4getWindow.UIOverdueListViewWindow.UIOverdueListViewList

            'Click '4get' client
            Mouse.Click(uIItem4getClient, New Point(362, 193))

            'Type 'Control + {Tab}' in '1' list item
            Keyboard.SendKeys(uIItem1ListItem, Me.TestNavigateTabsParams.UIItem1ListItemSendKeys, ModifierKeys.Control)

            'Type 'Control + {Tab}' in '1' list item
            Keyboard.SendKeys(uIItem1ListItem1, Me.TestNavigateTabsParams.UIItem1ListItemSendKeys1, ModifierKeys.Control)

            'Type 'Control + {Tab}' in 'overdueListView' list box
            Keyboard.SendKeys(uIOverdueListViewList, Me.TestNavigateTabsParams.UIOverdueListViewListSendKeys, ModifierKeys.Control)
        End Sub
        
        '''<summary>
        '''shortcut to input
        '''</summary>
        Public Sub TestShortcutInput()
            Dim uIItem4getClient As WinClient = Me.UIItem4getWindow.UIItem4getClient
            Dim uIToDoTabPage As WinTabPage = Me.UIItem4getWindow.UITabContainerWindow.UIToDoTabPage
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Click '4get' client
            Mouse.Click(uIItem4getClient, New Point(326, 211))

            'Type 'a' in 'To Do' tab
            Keyboard.SendKeys(uIToDoTabPage, Me.TestShortcutInputParams.UIToDoTabPageSendKeys, ModifierKeys.None)

            'Type 'add' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestShortcutInputParams.UITextboxInputEditText
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property TestAddTimedTaskParams() As TestAddTimedTaskParams
            Get
                If (Me.mTestAddTimedTaskParams Is Nothing) Then
                    Me.mTestAddTimedTaskParams = New TestAddTimedTaskParams()
                End If
                Return Me.mTestAddTimedTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestDeleteTaskParams() As TestDeleteTaskParams
            Get
                If (Me.mTestDeleteTaskParams Is Nothing) Then
                    Me.mTestDeleteTaskParams = New TestDeleteTaskParams()
                End If
                Return Me.mTestDeleteTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestMarkTaskDoneParams() As TestMarkTaskDoneParams
            Get
                If (Me.mTestMarkTaskDoneParams Is Nothing) Then
                    Me.mTestMarkTaskDoneParams = New TestMarkTaskDoneParams()
                End If
                Return Me.mTestMarkTaskDoneParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestModifyTaskParams() As TestModifyTaskParams
            Get
                If (Me.mTestModifyTaskParams Is Nothing) Then
                    Me.mTestModifyTaskParams = New TestModifyTaskParams()
                End If
                Return Me.mTestModifyTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestNavigateTabsParams() As TestNavigateTabsParams
            Get
                If (Me.mTestNavigateTabsParams Is Nothing) Then
                    Me.mTestNavigateTabsParams = New TestNavigateTabsParams()
                End If
                Return Me.mTestNavigateTabsParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestShortcutInputParams() As TestShortcutInputParams
            Get
                If (Me.mTestShortcutInputParams Is Nothing) Then
                    Me.mTestShortcutInputParams = New TestShortcutInputParams()
                End If
                Return Me.mTestShortcutInputParams
            End Get
        End Property
        
        Public ReadOnly Property UIItem4getWindow() As UIItem4getWindow
            Get
                If (Me.mUIItem4getWindow Is Nothing) Then
                    Me.mUIItem4getWindow = New UIItem4getWindow()
                End If
                Return Me.mUIItem4getWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mTestAddTimedTaskParams As TestAddTimedTaskParams
        
        Private mTestDeleteTaskParams As TestDeleteTaskParams
        
        Private mTestMarkTaskDoneParams As TestMarkTaskDoneParams
        
        Private mTestModifyTaskParams As TestModifyTaskParams
        
        Private mTestNavigateTabsParams As TestNavigateTabsParams
        
        Private mTestShortcutInputParams As TestShortcutInputParams
        
        Private mUIItem4getWindow As UIItem4getWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestAddTimedTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestAddTimedTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'add tuition ,at crown centre ,from 1900 ,to 2100 ,!' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "add tuition ,at crown centre ,from 1900 ,to 2100 ,!"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestDeleteTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestDeleteTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'delete 4' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "delete 4"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestMarkTaskDone'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestMarkTaskDoneParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'mark 7 done' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "mark 7 done"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys1 As String = "{Tab}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestModifyTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestModifyTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'mod 1 something ,at place ,by 24/12/13 2pm' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "mod 1 something ,at place ,by 24/12/13 2pm"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestNavigateTabs'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestNavigateTabsParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'Control + {Tab}' in '1' list item
        '''</summary>
        Public UIItem1ListItemSendKeys As String = "{Tab}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in '1' list item
        '''</summary>
        Public UIItem1ListItemSendKeys1 As String = "{Tab}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in 'overdueListView' list box
        '''</summary>
        Public UIOverdueListViewListSendKeys As String = "{Tab}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestShortcutInput'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestShortcutInputParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'a' in 'To Do' tab
        '''</summary>
        Public UIToDoTabPageSendKeys As String = "a"
        
        '''<summary>
        '''Type 'add' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "add"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIItem4getWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "4get"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIEnterCommandHereWindow() As UIEnterCommandHereWindow
            Get
                If (Me.mUIEnterCommandHereWindow Is Nothing) Then
                    Me.mUIEnterCommandHereWindow = New UIEnterCommandHereWindow(Me)
                End If
                Return Me.mUIEnterCommandHereWindow
            End Get
        End Property
        
        Public ReadOnly Property UIItem4getClient() As WinClient
            Get
                If (Me.mUIItem4getClient Is Nothing) Then
                    Me.mUIItem4getClient = New WinClient(Me)
                    Me.mUIItem4getClient.SearchProperties(WinControl.PropertyNames.Name) = "4get"
                    Me.mUIItem4getClient.WindowTitles.Add("4get")
                End If
                Return Me.mUIItem4getClient
            End Get
        End Property
        
        Public ReadOnly Property UITodoListViewWindow() As UITodoListViewWindow
            Get
                If (Me.mUITodoListViewWindow Is Nothing) Then
                    Me.mUITodoListViewWindow = New UITodoListViewWindow(Me)
                End If
                Return Me.mUITodoListViewWindow
            End Get
        End Property
        
        Public ReadOnly Property UICompletedListViewWindow() As UICompletedListViewWindow
            Get
                If (Me.mUICompletedListViewWindow Is Nothing) Then
                    Me.mUICompletedListViewWindow = New UICompletedListViewWindow(Me)
                End If
                Return Me.mUICompletedListViewWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOverdueListViewWindow() As UIOverdueListViewWindow
            Get
                If (Me.mUIOverdueListViewWindow Is Nothing) Then
                    Me.mUIOverdueListViewWindow = New UIOverdueListViewWindow(Me)
                End If
                Return Me.mUIOverdueListViewWindow
            End Get
        End Property
        
        Public ReadOnly Property UITabContainerWindow() As UITabContainerWindow
            Get
                If (Me.mUITabContainerWindow Is Nothing) Then
                    Me.mUITabContainerWindow = New UITabContainerWindow(Me)
                End If
                Return Me.mUITabContainerWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIEnterCommandHereWindow As UIEnterCommandHereWindow
        
        Private mUIItem4getClient As WinClient
        
        Private mUITodoListViewWindow As UITodoListViewWindow
        
        Private mUICompletedListViewWindow As UICompletedListViewWindow
        
        Private mUIOverdueListViewWindow As UIOverdueListViewWindow
        
        Private mUITabContainerWindow As UITabContainerWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIEnterCommandHereWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "textboxInput"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITextboxInputEdit() As WinEdit
            Get
                If (Me.mUITextboxInputEdit Is Nothing) Then
                    Me.mUITextboxInputEdit = New WinEdit(Me)
                    Me.mUITextboxInputEdit.WindowTitles.Add("4get")
                End If
                Return Me.mUITextboxInputEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITextboxInputEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UITodoListViewWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "todoListView"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItem1ListItem() As WinListItem
            Get
                If (Me.mUIItem1ListItem Is Nothing) Then
                    Me.mUIItem1ListItem = New WinListItem(Me)
                    Me.mUIItem1ListItem.SearchProperties(WinListItem.PropertyNames.Name) = "1"
                    Me.mUIItem1ListItem.WindowTitles.Add("4get")
                End If
                Return Me.mUIItem1ListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItem1ListItem As WinListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UICompletedListViewWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "completedListView"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItem1ListItem() As WinListItem
            Get
                If (Me.mUIItem1ListItem Is Nothing) Then
                    Me.mUIItem1ListItem = New WinListItem(Me)
                    Me.mUIItem1ListItem.SearchProperties(WinListItem.PropertyNames.Name) = "1"
                    Me.mUIItem1ListItem.WindowTitles.Add("4get")
                End If
                Return Me.mUIItem1ListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItem1ListItem As WinListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIOverdueListViewWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "overdueListView"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOverdueListViewList() As WinList
            Get
                If (Me.mUIOverdueListViewList Is Nothing) Then
                    Me.mUIOverdueListViewList = New WinList(Me)
                    Me.mUIOverdueListViewList.WindowTitles.Add("4get")
                End If
                Return Me.mUIOverdueListViewList
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOverdueListViewList As WinList
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UITabContainerWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "tabContainer"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIToDoTabPage() As WinTabPage
            Get
                If (Me.mUIToDoTabPage Is Nothing) Then
                    Me.mUIToDoTabPage = New WinTabPage(Me)
                    Me.mUIToDoTabPage.SearchProperties(WinTabPage.PropertyNames.Name) = "To Do"
                    Me.mUIToDoTabPage.WindowTitles.Add("4get")
                End If
                Return Me.mUIToDoTabPage
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIToDoTabPage As WinTabPage
        #End Region
    End Class
End Namespace

'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 11.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace CodedGUITest.Item4getUIMapClasses
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Partial Public Class Item4getUIMap
        
        '''<summary>
        '''Add a timed task
        '''</summary>
        Public Sub TestAddTimedTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'add' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestAddTimedTaskParams.UITextboxInputEditText

            'Type 'add lunch with colleagues ,at technoedge ,from 1200 ,to 1400' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestAddTimedTaskParams.UITextboxInputEditText1

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestAddTimedTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''delete a task
        '''</summary>
        Public Sub TestDeleteTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'del 1' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestDeleteTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestDeleteTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''mark a task as done
        '''</summary>
        Public Sub TestMarkTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'mark 4 done' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestMarkTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestMarkTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)

            'Type 'Control + {Tab}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestMarkTaskParams.UITextboxInputEditSendKeys1, ModifierKeys.Control)
        End Sub
        
        '''<summary>
        '''TestModifyTask - Use 'TestModifyTaskParams' to pass parameters into this method.
        '''</summary>
        Public Sub TestModifyTask()
            Dim uIToDoTabPage As WinTabPage = Me.UIItem4getWindow.UITabContainerWindow.UIToDoTabPage
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Click 'To Do' tab
            Mouse.Click(uIToDoTabPage, New Point(25, 9))

            'Type 'mod 10 cs2103 tutorial 10 ,at com 1 basement lab' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestModifyTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestModifyTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''add a floating task
        '''</summary>
        Public Sub TestAddFloatingTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'add test adding floating task ,at venue' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestAddFloatingTaskParams.UITextboxInputEditText

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestAddFloatingTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''add a deadline task
        '''</summary>
        Public Sub TestAddDeadlineTask()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type 'add ee2021 homework ,by ' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestAddDeadlineTaskParams.UITextboxInputEditText

            'Type 'add ee2021 homework ,by 24/10/13 1200' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestAddDeadlineTaskParams.UITextboxInputEditText1

            'Type '{Enter}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestAddDeadlineTaskParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''When user changes command input, the generated mesage should change too. When user continues to backspace even after input is empty, program handles it and doesn't crash.
        '''</summary>
        Public Sub TestChangeMessageAndBackspaceNothing()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit

            'Type '' in 'textboxInput' text box
            uITextboxInputEdit.Text = Me.TestChangeMessageAndBackspaceNothingParams.UITextboxInputEditText

            'Type '{Back}{Back}{Back}{Back}{Back}{Back}{Back}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestChangeMessageAndBackspaceNothingParams.UITextboxInputEditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''keyboard shortcut to change between tabs of list
        '''</summary>
        Public Sub TestChangeListTab()
            Dim uITextboxInputEdit As WinEdit = Me.UIItem4getWindow.UIEnterCommandHereWindow.UITextboxInputEdit
            Dim uIItem1ListItem As WinListItem = Me.UIItem4getWindow.UICompletedListViewWindow.UIItem1ListItem
            Dim uIOverdueListViewList As WinList = Me.UIItem4getWindow.UIOverdueListViewWindow.UIOverdueListViewList
            Dim uIItem1ListItem1 As WinListItem = Me.UIItem4getWindow.UITodoListViewWindow.UIItem1ListItem

            'Type 'Control + {Tab}' in 'textboxInput' text box
            Keyboard.SendKeys(uITextboxInputEdit, Me.TestChangeListTabParams.UITextboxInputEditSendKeys, ModifierKeys.Control)

            'Type 'Control + {Tab}' in '1' list item
            Keyboard.SendKeys(uIItem1ListItem, Me.TestChangeListTabParams.UIItem1ListItemSendKeys, ModifierKeys.Control)

            'Type 'Control + {Tab}' in 'overdueListView' list box
            Keyboard.SendKeys(uIOverdueListViewList, Me.TestChangeListTabParams.UIOverdueListViewListSendKeys, ModifierKeys.Control)

            'Type 'Control + {Tab}' in '1' list item
            Keyboard.SendKeys(uIItem1ListItem1, Me.TestChangeListTabParams.UIItem1ListItemSendKeys1, ModifierKeys.Control)

            'Type 'Control + {Tab}' in '1' list item
            Keyboard.SendKeys(uIItem1ListItem, Me.TestChangeListTabParams.UIItem1ListItemSendKeys2, ModifierKeys.Control)

            'Type 'Control + {Tab}' in 'overdueListView' list box
            Keyboard.SendKeys(uIOverdueListViewList, Me.TestChangeListTabParams.UIOverdueListViewListSendKeys1, ModifierKeys.Control)
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property TestAddTimedTaskParams() As TestAddTimedTaskParams
            Get
                If (Me.mTestAddTimedTaskParams Is Nothing) Then
                    Me.mTestAddTimedTaskParams = New TestAddTimedTaskParams()
                End If
                Return Me.mTestAddTimedTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestDeleteTaskParams() As TestDeleteTaskParams
            Get
                If (Me.mTestDeleteTaskParams Is Nothing) Then
                    Me.mTestDeleteTaskParams = New TestDeleteTaskParams()
                End If
                Return Me.mTestDeleteTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestMarkTaskParams() As TestMarkTaskParams
            Get
                If (Me.mTestMarkTaskParams Is Nothing) Then
                    Me.mTestMarkTaskParams = New TestMarkTaskParams()
                End If
                Return Me.mTestMarkTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestModifyTaskParams() As TestModifyTaskParams
            Get
                If (Me.mTestModifyTaskParams Is Nothing) Then
                    Me.mTestModifyTaskParams = New TestModifyTaskParams()
                End If
                Return Me.mTestModifyTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestAddFloatingTaskParams() As TestAddFloatingTaskParams
            Get
                If (Me.mTestAddFloatingTaskParams Is Nothing) Then
                    Me.mTestAddFloatingTaskParams = New TestAddFloatingTaskParams()
                End If
                Return Me.mTestAddFloatingTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestAddDeadlineTaskParams() As TestAddDeadlineTaskParams
            Get
                If (Me.mTestAddDeadlineTaskParams Is Nothing) Then
                    Me.mTestAddDeadlineTaskParams = New TestAddDeadlineTaskParams()
                End If
                Return Me.mTestAddDeadlineTaskParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestChangeMessageAndBackspaceNothingParams() As TestChangeMessageAndBackspaceNothingParams
            Get
                If (Me.mTestChangeMessageAndBackspaceNothingParams Is Nothing) Then
                    Me.mTestChangeMessageAndBackspaceNothingParams = New TestChangeMessageAndBackspaceNothingParams()
                End If
                Return Me.mTestChangeMessageAndBackspaceNothingParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property TestChangeListTabParams() As TestChangeListTabParams
            Get
                If (Me.mTestChangeListTabParams Is Nothing) Then
                    Me.mTestChangeListTabParams = New TestChangeListTabParams()
                End If
                Return Me.mTestChangeListTabParams
            End Get
        End Property
        
        Public ReadOnly Property UIItem4getWindow() As UIItem4getWindow
            Get
                If (Me.mUIItem4getWindow Is Nothing) Then
                    Me.mUIItem4getWindow = New UIItem4getWindow()
                End If
                Return Me.mUIItem4getWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mTestAddTimedTaskParams As TestAddTimedTaskParams
        
        Private mTestDeleteTaskParams As TestDeleteTaskParams
        
        Private mTestMarkTaskParams As TestMarkTaskParams
        
        Private mTestModifyTaskParams As TestModifyTaskParams
        
        Private mTestAddFloatingTaskParams As TestAddFloatingTaskParams
        
        Private mTestAddDeadlineTaskParams As TestAddDeadlineTaskParams
        
        Private mTestChangeMessageAndBackspaceNothingParams As TestChangeMessageAndBackspaceNothingParams
        
        Private mTestChangeListTabParams As TestChangeListTabParams
        
        Private mUIItem4getWindow As UIItem4getWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestAddTimedTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestAddTimedTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'add' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "add"
        
        '''<summary>
        '''Type 'add lunch with colleagues ,at technoedge ,from 1200 ,to 1400' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText1 As String = "add lunch with colleagues ,at technoedge ,from 1200 ,to 1400"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestDeleteTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestDeleteTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'del 1' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "del 1"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestMarkTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestMarkTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'mark 4 done' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "mark 4 done"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys1 As String = "{Tab}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestModifyTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestModifyTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'mod 10 cs2103 tutorial 10 ,at com 1 basement lab' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "mod 10 cs2103 tutorial 10 ,at com 1 basement lab"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestAddFloatingTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestAddFloatingTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'add test adding floating task ,at venue' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "add test adding floating task ,at venue"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestAddDeadlineTask'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestAddDeadlineTaskParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'add ee2021 homework ,by ' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = "add ee2021 homework ,by "
        
        '''<summary>
        '''Type 'add ee2021 homework ,by 24/10/13 1200' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText1 As String = "add ee2021 homework ,by 24/10/13 1200"
        
        '''<summary>
        '''Type '{Enter}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Enter}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestChangeMessageAndBackspaceNothing'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestChangeMessageAndBackspaceNothingParams
        
        #Region "Fields"
        '''<summary>
        '''Type '' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditText As String = ""
        
        '''<summary>
        '''Type '{Back}{Back}{Back}{Back}{Back}{Back}{Back}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Back}{Back}{Back}{Back}{Back}{Back}{Back}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'TestChangeListTab'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class TestChangeListTabParams
        
        #Region "Fields"
        '''<summary>
        '''Type 'Control + {Tab}' in 'textboxInput' text box
        '''</summary>
        Public UITextboxInputEditSendKeys As String = "{Tab}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in '1' list item
        '''</summary>
        Public UIItem1ListItemSendKeys As String = "{Tab}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in 'overdueListView' list box
        '''</summary>
        Public UIOverdueListViewListSendKeys As String = "{Tab}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in '1' list item
        '''</summary>
        Public UIItem1ListItemSendKeys1 As String = "{Tab}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in '1' list item
        '''</summary>
        Public UIItem1ListItemSendKeys2 As String = "{Tab}"
        
        '''<summary>
        '''Type 'Control + {Tab}' in 'overdueListView' list box
        '''</summary>
        Public UIOverdueListViewListSendKeys1 As String = "{Tab}"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIItem4getWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "4get"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIEnterCommandHereWindow() As UIEnterCommandHereWindow
            Get
                If (Me.mUIEnterCommandHereWindow Is Nothing) Then
                    Me.mUIEnterCommandHereWindow = New UIEnterCommandHereWindow(Me)
                End If
                Return Me.mUIEnterCommandHereWindow
            End Get
        End Property
        
        Public ReadOnly Property UITabContainerWindow() As UITabContainerWindow
            Get
                If (Me.mUITabContainerWindow Is Nothing) Then
                    Me.mUITabContainerWindow = New UITabContainerWindow(Me)
                End If
                Return Me.mUITabContainerWindow
            End Get
        End Property
        
        Public ReadOnly Property UICompletedListViewWindow() As UICompletedListViewWindow
            Get
                If (Me.mUICompletedListViewWindow Is Nothing) Then
                    Me.mUICompletedListViewWindow = New UICompletedListViewWindow(Me)
                End If
                Return Me.mUICompletedListViewWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOverdueListViewWindow() As UIOverdueListViewWindow
            Get
                If (Me.mUIOverdueListViewWindow Is Nothing) Then
                    Me.mUIOverdueListViewWindow = New UIOverdueListViewWindow(Me)
                End If
                Return Me.mUIOverdueListViewWindow
            End Get
        End Property
        
        Public ReadOnly Property UITodoListViewWindow() As UITodoListViewWindow
            Get
                If (Me.mUITodoListViewWindow Is Nothing) Then
                    Me.mUITodoListViewWindow = New UITodoListViewWindow(Me)
                End If
                Return Me.mUITodoListViewWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIEnterCommandHereWindow As UIEnterCommandHereWindow
        
        Private mUITabContainerWindow As UITabContainerWindow
        
        Private mUICompletedListViewWindow As UICompletedListViewWindow
        
        Private mUIOverdueListViewWindow As UIOverdueListViewWindow
        
        Private mUITodoListViewWindow As UITodoListViewWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIEnterCommandHereWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "textboxInput"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITextboxInputEdit() As WinEdit
            Get
                If (Me.mUITextboxInputEdit Is Nothing) Then
                    Me.mUITextboxInputEdit = New WinEdit(Me)
                    Me.mUITextboxInputEdit.WindowTitles.Add("4get")
                End If
                Return Me.mUITextboxInputEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITextboxInputEdit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UITabContainerWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "tabContainer"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIToDoTabPage() As WinTabPage
            Get
                If (Me.mUIToDoTabPage Is Nothing) Then
                    Me.mUIToDoTabPage = New WinTabPage(Me)
                    Me.mUIToDoTabPage.SearchProperties(WinTabPage.PropertyNames.Name) = "To Do"
                    Me.mUIToDoTabPage.WindowTitles.Add("4get")
                End If
                Return Me.mUIToDoTabPage
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIToDoTabPage As WinTabPage
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UICompletedListViewWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "completedListView"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItem1ListItem() As WinListItem
            Get
                If (Me.mUIItem1ListItem Is Nothing) Then
                    Me.mUIItem1ListItem = New WinListItem(Me)
                    Me.mUIItem1ListItem.SearchProperties(WinListItem.PropertyNames.Name) = "1"
                    Me.mUIItem1ListItem.WindowTitles.Add("4get")
                End If
                Return Me.mUIItem1ListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItem1ListItem As WinListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UIOverdueListViewWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "overdueListView"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOverdueListViewList() As WinList
            Get
                If (Me.mUIOverdueListViewList Is Nothing) Then
                    Me.mUIOverdueListViewList = New WinList(Me)
                    Me.mUIOverdueListViewList.WindowTitles.Add("4get")
                End If
                Return Me.mUIOverdueListViewList
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOverdueListViewList As WinList
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "11.0.60315.1")>  _
    Public Class UITodoListViewWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "todoListView"
            Me.WindowTitles.Add("4get")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItem1ListItem() As WinListItem
            Get
                If (Me.mUIItem1ListItem Is Nothing) Then
                    Me.mUIItem1ListItem = New WinListItem(Me)
                    Me.mUIItem1ListItem.SearchProperties(WinListItem.PropertyNames.Name) = "1"
                    Me.mUIItem1ListItem.WindowTitles.Add("4get")
                End If
                Return Me.mUIItem1ListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItem1ListItem As WinListItem
        #End Region
    End Class
End Namespace
